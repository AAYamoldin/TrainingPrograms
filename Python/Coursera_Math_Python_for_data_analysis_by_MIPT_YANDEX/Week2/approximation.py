#!/usr/bin/env python
# coding: utf-8

# # Рассмотрим сложную математическую функцию на отрезке [1, 15]:
# # f(x) = sin(x / 5) * exp(x / 10) + 5 * exp(-x / 2)

# будем находить приближение функции многочленом, решая систему линейных уравнений.
# Сформируйте систему линейных уравнений (то есть задайте матрицу коэффициентов A и свободный вектор b) для многочлена первой степени, который должен совпадать с функцией f в точках 1 и 15. Решите данную систему с помощью функции scipy.linalg.solve. Нарисуйте функцию f и полученный многочлен. Хорошо ли он приближает исходную функцию?

# In[31]:


import numpy as np
import matplotlib.pyplot as plt
import scipy.linalg


# In[8]:


y = lambda x: np.sin(x/5)*np.exp(x/10)+5*np.exp(-x/2)
x = np.linspace(1,15,15)
fig = plt.subplots()
plt.plot(x,y(x))


# In[44]:


b = np.array([y(1), y(15)])
b = b[:, np.newaxis]
a_matrix = np.array([[1,1], [1,15]])
w = scipy.linalg.solve(a_matrix, b)
y1 = lambda x: w[0][0] + w[1][0]*x 
plt.plot(x, y(x))
plt.plot(x, y1(x))


# Повторите те же шаги для многочлена второй степени, который совпадает с функцией f в точках 1, 8 и 15. Улучшилось ли качество аппроксимации?

# In[45]:


b = np.array([y(1), y(8) ,y(15)])
b = b[:, np.newaxis]
a_matrix = np.array([[1,1,1], [1,8,64], [1,15, 15**2]])
w = scipy.linalg.solve(a_matrix, b)
y1 = lambda x: w[0][0] + w[1][0]*x + w[2][0]*x**2
plt.plot(x, y(x))
plt.plot(x, y1(x))


# Повторите те же шаги для многочлена третьей степени, который совпадает с функцией f в точках 1, 4, 10 и 15. Хорошо ли он аппроксимирует функцию? Коэффициенты данного многочлена (четыре числа в следующем порядке: w_0, w_1, w_2, w_3) являются ответом на задачу. Округлять коэффициенты не обязательно, но при желании можете произвести округление до второго знака (т.е. до числа вида 0.42)

# In[48]:


b = np.array([y(1), y(4), y(10) ,y(15)])
b = b[:, np.newaxis]
a_matrix = np.array([[1,1,1,1], [1,4,4**2, 4**3],[1,10, 10**2,10**3] ,[1,15, 15**2,15**3]])
w = scipy.linalg.solve(a_matrix, b)
y1 = lambda x: w[0][0] + w[1][0]*x + w[2][0]*x**2 + w[3][0]*x**3
plt.plot(x, y(x))
plt.plot(x, y1(x))


# In[49]:


with open('submission-2.txt', 'w') as f:
    string = str(w[0][0]) + ' ' + str(w[1][0]) + ' ' + str(w[2][0]) + ' ' + str(w[3][0])
    f.write(string)
                                            


# In[ ]:




